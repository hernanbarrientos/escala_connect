import streamlit as st
# Importa as fun√ß√µes do banco de dados, incluindo a de minist√©rios
from database import add_funcao, view_all_funcoes, update_funcao, delete_funcao, get_all_ministerios
import style

# --- NOVO: Verifica√ß√£o de Login no topo da p√°gina ---
# Esta verifica√ß√£o deve ser adicionada em TODAS as p√°ginas, exceto a de Login.
if not st.session_state.get('logged_in'):
    st.switch_page("Login.py")

# Aplica o estilo global
style.apply_style()

def main():
    st.set_page_config(page_title="Gerenciar Fun√ß√µes", layout="wide")
    
    # Pega o ID do minist√©rio que foi salvo no momento do login
    id_ministerio_logado = st.session_state['id_ministerio_logado']
    
    # Busca o nome do minist√©rio para uma mensagem de boas-vindas
    todos_ministerios_df = get_all_ministerios()
    nome_ministerio = todos_ministerios_df[todos_ministerios_df['id_ministerio'] == id_ministerio_logado]['nome_ministerio'].iloc[0]
    
    st.title(f"Fun√ß√µes do Minist√©rio {nome_ministerio}")

    # --- Se√ß√£o para Gerenciar Fun√ß√µes ---
    st.header("Adicionar e Editar Fun√ß√µes")

    # Formul√°rio para adicionar nova fun√ß√£o
    with st.form("nova_funcao_form", clear_on_submit=True):
        novo_nome = st.text_input("Nome da fun√ß√£o", placeholder="Ex: Store")
        nova_descricao = st.text_area("Descri√ß√£o (opcional)")
        submitted = st.form_submit_button("Adicionar Fun√ß√£o")
        
        if submitted:
            if novo_nome:
                # A fun√ß√£o agora recebe o ID do minist√©rio do usu√°rio logado
                add_funcao(novo_nome, nova_descricao, id_ministerio_logado)
                st.rerun() 
            else:
                st.warning("O nome da fun√ß√£o n√£o pode ser vazio.")

    st.divider()

    # --- Se√ß√£o para Visualizar e Editar Fun√ß√µes Existentes ---
    st.subheader("Fun√ß√µes Existentes")
    
    # A fun√ß√£o agora busca apenas as fun√ß√µes do minist√©rio do usu√°rio logado
    df_funcoes = view_all_funcoes(id_ministerio_logado)
    
    if df_funcoes.empty:
        st.info("Nenhuma fun√ß√£o cadastrada para este minist√©rio ainda.")
    else:
        # Cria um cabe√ßalho para nossa lista
        col1, col2, col3 = st.columns([2, 2, 8])
        with col1:
            st.write("**Fun√ß√£o**")
        with col2:
            st.write("**A√ß√µes**")
        
        # Itera sobre cada fun√ß√£o cadastrada para criar os bot√µes
        for index, row in df_funcoes.iterrows():
            id_funcao = row['id_funcao']
            nome_funcao = row['nome_funcao']
            descricao_funcao = row['descricao']

            col1, col2, col3 = st.columns([2, 2, 8])

            with col1:
                st.write(nome_funcao)

            with col2:
                # Bot√£o de Editar abre um pop-up (st.expander)
                with st.expander("‚úèÔ∏è Editar"):
                    with st.form(f"edit_form_{id_funcao}"):
                        novo_nome_edit = st.text_input("Novo nome", value=nome_funcao, key=f"nome_{id_funcao}")
                        nova_descricao_edit = st.text_area("Nova descri√ß√£o", value=descricao_funcao, key=f"desc_{id_funcao}")
                        
                        if st.form_submit_button("Salvar"):
                            update_funcao(id_funcao, novo_nome_edit, nova_descricao_edit)
                            st.rerun()

            with col3:
                # Bot√£o de Excluir
                if st.button("üóëÔ∏è Excluir", key=f"del_{id_funcao}"):
                    delete_funcao(id_funcao)
                    st.rerun()

if __name__ == '__main__':
    main()